SOLUTION -
1st method - naive approach by traversing the whole matrix.
code - 
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        bool search = false;
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
                if(target == matrix[i][j])
                {
                    search = true;
                    break;
                }
            }
        }
        return search;
        
    }
LEARNINGS - 
No learnings.

2nd Method - iterate in a matrix row wise and do a binary search in each row with time complexity O(n*logm) and space complexity O(1)
LEARNINGS - 
Got to know about binary search.

3rd method - do a binary search in the whole matrix by the imaginary indexing with time complexity O(log(m*n)) and space complexity O(1).
code - 
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        bool search =  false;
        if(!matrix.size()) return search;
        int n = matrix.size();
        int m  = matrix[0].size();
        int lo = 0;
        int hi = (n*m)-1;
        int mid;
        while(lo<=hi)
        {
            mid = (lo +(hi-lo)/2);
            if(matrix[mid/m][mid%m]==target)
            {
              search = true;
                break;
            }
            else if(matrix[mid/m][mid%m]>target)
            {
                hi = mid-1;
            }
            else if(matrix[mid/m][mid%m]<target)
            {
                lo = mid+1;
            }
        }
        return search;
        
    }
    
LEARNINGS - 
Same as method 2.
