Method 1 - simply by brute force method with Time Complexity O(N^2) and Space complexity O(1);
Method 2 - inversion count with the help of merge sort with Time Complexity O(NlogN) and Space Complexity O(N);
Code for the second method - 
long long int merge(long long arr[], long long temp[], long long left,long long mid,long long right)
    {
        long long i,j,k;
        long long inv_count = 0;
        i = left;
        j = mid;
        k = left;
        while((i<=mid-1) && (j<=right))
        {
            if(arr[i]<=arr[j])
            {
                temp[k++] = arr[i++];
            }
            else
            {
                temp[k++] = arr[j++];
                inv_count = inv_count + (mid-i);
            }
        }
        while(i<=mid-1)
        {
            temp[k++] = arr[i++];
        }
        while(j<=right)
        {
            temp[k++] = arr[j++];
        }
        
        for (long long i = left; i <= right; i++) 
		    arr[i] = temp[i]; 
		
        return inv_count;
    }
    
    long long int mergesort(long long arr[],long long temp[],long long left,long long right)
    {
        int mid,inv_count = 0;
        if(right>left)
        {
            mid = (left + right)/2;
            inv_count += mergesort(arr, temp, left, mid);
            inv_count += mergesort(arr, temp, mid+1, right);
            
            inv_count += merge(arr, temp, left, mid+1, right);
        }
        return inv_count;
    }

long long int inversionCount(long long arr[], long long N)
{
    long long temp[N];
    long long ans = mergesort(arr, temp, 0, N-1);
    return ans;
}
