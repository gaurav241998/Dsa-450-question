Method 1 - using hash map with Time complexity O(n1+n2+n3) and Space complexity O(n1+n2+n3);
Code for the first method - 
vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            vector <int>  CM;
            unordered_map<int, int> m1,m2,m3;
            for(int i=0;i<n1;i++) m1[A[i]]++;
            for(int i=0;i<n2;i++) m2[B[i]]++;
            for(int i=0;i<n3;i++) m3[C[i]]++;
            
            for(int i=0;i<n1;i++)
            {
                if(m1[A[i]] && m2[A[i]] && m3[A[i]])
                {
                    CM.push_back(A[i]);
                    m1[A[i]] = 0;
                }
            }
            return CM;
        }
        
        
Method 2 - using comparision between the three arrays elements with Time Complexity O(n1+n2+n3) and Space complexity O(1).
Code for the second method - 
vector <int> CM;
            int i=0,j=0,k=0;
            while(i<n1 && j<n2 && k<n3)
            {
                if(A[i]==B[j] && B[j]==C[k])
                {
                    CM.push_back(A[i]);
                    i++;
                    j++;
                    k++;
                }
                else if(A[i]<B[j])
                {
                    i++;
                }
                else if(B[j]<C[k])
                {
                    j++;
                }
                else k++;
                int xx = A[i-1];
                while(A[i]==xx) i++;
                int yy = B[j-1];
                while(B[j]==yy) j++;
                int zz = C[k-1];
                while(C[k]==zz) k++;
            }
            return CM;
        }
        
        
for the explaination of both the methods please refer to this video - 
https://www.youtube.com/watch?v=ajWCEu1razQ
