USING BFS - 

bool isCyclic(int V, vector<int> adj[]) {
	   	queue<int > q;
	   	vector<int> in(V,0);
	   	for(int i=0;i<V;i++)
	   	{
	   	    for(auto x:adj[i])
	   	    {
	   	        in[x]++;
	   	    }
	   	}
	   	for(int i=0;i<V;i++)
	   	{
	   	    if(in[i] == 0)
	   	    {
	   	        q.push(i);
	   	    }
	   	}
	   	int c = q.size();
	   	while(!q.empty())
	   	{
	   	    int td = q.front();
	   	    q.pop();
	   	    for(auto x:adj[td])
	   	    {
	   	        in[x]--;
	   	        if(in[x] == 0)
	   	        {
	   	            q.push(x);
	   	            c++;
	   	        }
	   	    }
	   	}
	   	if(c == V) return false;
	   	else return true;
	}
	
	
USING DFS - 

bool solve(int src,vector<int> &vis,vector<int> &order,vector<int> adj[])
	   {
	       vis[src] = 1;
	       order[src] = 1;
	       for(auto x:adj[src])
	       {
	           if(!vis[x])
	           {
	               bool conf = solve(x,vis,order,adj);
	               if(conf)
	               {
	                   return true;
	               }
	           }
	           else if(order[x])
	           {
	               return true;
	           }
	       }
	       order[src] = 0;
	       return false;
	   }
	   
	   
	bool isCyclic(int V, vector<int> adj[]) {
	    vector<int> vis(V,0);
	    vector<int> order(V,0);
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	        {
	            bool c = solve(i,vis,order,adj);
	            if(c)
	              return true;
	        }
	    }
	    return false;
	}
